diff --git a/package/cairo/0001-cairo-ft-private.h-fix-missing-FT_Color-error.patch b/package/cairo/0001-cairo-ft-private.h-fix-missing-FT_Color-error.patch
deleted file mode 100644
index 3b18d8077b..0000000000
--- a/package/cairo/0001-cairo-ft-private.h-fix-missing-FT_Color-error.patch
+++ /dev/null
@@ -1,32 +0,0 @@
-From da698db0c20507f0e07492cbe40dbaf1c9053f71 Mon Sep 17 00:00:00 2001
-From: Thomas Devoogdt <thomas@devoogdt.com>
-Date: Sun, 12 Nov 2023 09:58:05 +0100
-Subject: [PATCH] cairo-ft-private.h: fix missing FT_Color error
-
-In file included from ../src/cairo-colr-glyph-render.c:37:
-../src/cairo-ft-private.h:87:30: error: unknown type name 'FT_Color'
-   87 |                              FT_Color               *palette,
-      |                              ^~~~~~~~
-
-Upstream: https://gitlab.freedesktop.org/cairo/cairo/-/issues/792
-Signed-off-by: Thomas Devoogdt <thomas@devoogdt.com>
----
- src/cairo-ft-private.h | 2 ++
- 1 file changed, 2 insertions(+)
-
-diff --git a/src/cairo-ft-private.h b/src/cairo-ft-private.h
-index 836f7e523..6b0e30223 100644
---- a/src/cairo-ft-private.h
-+++ b/src/cairo-ft-private.h
-@@ -43,6 +43,8 @@
- 
- #if CAIRO_HAS_FT_FONT
- 
-+#include FT_COLOR_H
-+
- CAIRO_BEGIN_DECLS
- 
- typedef struct _cairo_ft_unscaled_font cairo_ft_unscaled_font_t;
--- 
-2.34.1
-
diff --git a/package/cairo/0001-fix-nofork-build.patch b/package/cairo/0001-fix-nofork-build.patch
new file mode 100644
index 0000000000..702e9910a5
--- /dev/null
+++ b/package/cairo/0001-fix-nofork-build.patch
@@ -0,0 +1,29 @@
+test: fix build when SHOULD_FORK is false
+
+The code in test/cairo-test-runner.c properly takes into account
+platforms that do have fork() support, and uses the SHOULD_FORK define
+to know whether fork is available or not.
+
+However, this SHOULD_FORK macro is used to guard the inclusion of
+<unistd.h>, which is needed to get the prototype of other functions
+(namely readlink and getppid), that are used in portions of this file
+not guarded by SHOULD_FORK.
+
+Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
+
+Index: b/test/cairo-test-runner.c
+===================================================================
+--- a/test/cairo-test-runner.c
++++ b/test/cairo-test-runner.c
+@@ -36,10 +36,10 @@
+ #include <pixman.h> /* for version information */
+ 
+ #define SHOULD_FORK HAVE_FORK && HAVE_WAITPID
+-#if SHOULD_FORK
+ #if HAVE_UNISTD_H
+ #include <unistd.h>
+ #endif
++#if SHOULD_FORK
+ #if HAVE_SIGNAL_H
+ #include <signal.h>
+ #endif
diff --git a/package/cairo/0002-ft-Use-FT_Done_MM_Var-instead-of-free-when-available-in-cairo_ft_apply_variation.patch b/package/cairo/0002-ft-Use-FT_Done_MM_Var-instead-of-free-when-available-in-cairo_ft_apply_variation.patch
new file mode 100644
index 0000000000..33b71df4d6
--- /dev/null
+++ b/package/cairo/0002-ft-Use-FT_Done_MM_Var-instead-of-free-when-available-in-cairo_ft_apply_variation.patch
@@ -0,0 +1,32 @@
+From 90e85c2493fdfa3551f202ff10282463f1e36645 Mon Sep 17 00:00:00 2001
+From: Carlos Garcia Campos <cgarcia@igalia.com>
+Date: Mon, 19 Nov 2018 12:33:07 +0100
+Subject: [PATCH] ft: Use FT_Done_MM_Var instead of free when available in
+ cairo_ft_apply_variations
+
+Fixes a crash when using freetype >= 2.9
+[Retrieved from:
+https://gitlab.freedesktop.org/cairo/cairo/-/commit/90e85c2493fdfa3551f202ff10282463f1e36645]
+Signed-off-by: Fabrice Fontaine <fontaine.fabrice@gmail.com>
+---
+ src/cairo-ft-font.c | 4 ++++
+ 1 file changed, 4 insertions(+)
+
+diff --git a/src/cairo-ft-font.c b/src/cairo-ft-font.c
+index 325dd61b4..981973f78 100644
+--- a/src/cairo-ft-font.c
++++ b/src/cairo-ft-font.c
+@@ -2393,7 +2393,11 @@ skip:
+ done:
+         free (coords);
+         free (current_coords);
++#if HAVE_FT_DONE_MM_VAR
++        FT_Done_MM_Var (face->glyph->library, ft_mm_var);
++#else
+         free (ft_mm_var);
++#endif
+     }
+ }
+ 
+-- 
+2.24.1
diff --git a/package/cairo/0002-meson-always-skip-IPC_RMID_DEFERRED_RELEASE-check-wh.patch b/package/cairo/0002-meson-always-skip-IPC_RMID_DEFERRED_RELEASE-check-wh.patch
deleted file mode 100644
index 5a5c438a97..0000000000
--- a/package/cairo/0002-meson-always-skip-IPC_RMID_DEFERRED_RELEASE-check-wh.patch
+++ /dev/null
@@ -1,41 +0,0 @@
-From 8d5037ed642b02cdb018e49866aa286f30a7b59a Mon Sep 17 00:00:00 2001
-From: Thomas Devoogdt <thomas@devoogdt.com>
-Date: Mon, 5 Feb 2024 17:47:07 +0100
-Subject: [PATCH] meson: always skip IPC_RMID_DEFERRED_RELEASE check when
- cross-compiling
-
-../../br-test-pkg/bootlin-armv5-uclibc/build/cairo-1.17.4/meson.build:279:13:
-ERROR: Can not run test applications in this cross environment.
-
-Commit 1bec56ea8a931e1ae1c74cc740134497ec365267 added support to define
-ipc_rmid_deferred_release in a cross-compile config, but still kept
-the default to auto, which anyhow results in an error when cross-compiling.
-
-There is only one usage of the ipc_rmid_deferred_release compile declarative
-which was originally added in this commit: 5041b462d084de8552336275914d30c23bf5dd35.
-
-If ipc_rmid_deferred_release is set to FALSE, an additional XSync is performed.
-This doesn't sound very harmful, so that is why this commit defaults to FALSE
-and thus avoids any cross-compile errors.
-
-Upstream: https://gitlab.freedesktop.org/cairo/cairo/-/merge_requests/534
-Signed-off-by: Thomas Devoogdt <thomas@devoogdt.com>
----
- meson.build | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
-diff --git a/meson.build b/meson.build
-index 9efe91978..6a670bf94 100644
---- a/meson.build
-+++ b/meson.build
-@@ -369,7 +369,7 @@ if x11_dep.found() and xext_dep.found()
- 
-   # Can skip the run check by providing the result in a cross file or
-   # native file as bool property value.
--  prop = meson.get_external_property('ipc_rmid_deferred_release', 'auto')
-+  prop = meson.get_external_property('ipc_rmid_deferred_release', meson.is_cross_build() ? 'false' : 'auto')
-   # We don't know the type of prop (bool, string) but need to differentiate
-   # between a set value (bool) or the fallback value (string), so convert to
-   # a string and check the string value.
---
-2.34.1
diff --git a/package/cairo/0003-meson-only-require-cpp-for-windows.patch b/package/cairo/0003-meson-only-require-cpp-for-windows.patch
deleted file mode 100644
index 3ce396f66f..0000000000
--- a/package/cairo/0003-meson-only-require-cpp-for-windows.patch
+++ /dev/null
@@ -1,38 +0,0 @@
-From e93ef3feb69994e3aa4e0ab66ccd66139b097e49 Mon Sep 17 00:00:00 2001
-From: Thomas Devoogdt <thomas.devoogdt@barco.com>
-Date: Thu, 18 Jul 2024 12:16:51 +0200
-Subject: [PATCH] meson: only require cpp for windows
-
-Allow to compile cairo without c++ toolchain.
-
-Fixes:
- - http://autobuild.buildroot.net/results/98b62ab7ed3092f9f9085f723baf7d6267451e5c/
-
-Upstream: https://gitlab.freedesktop.org/cairo/cairo/-/merge_requests/573
-Signed-off-by: Thomas Devoogdt <thomas.devoogdt@barco.com>
----
- meson.build | 4 +++-
- 1 file changed, 3 insertions(+), 1 deletion(-)
-
-diff --git a/meson.build b/meson.build
-index 9100152ee..297482b03 100644
---- a/meson.build
-+++ b/meson.build
-@@ -1,4 +1,4 @@
--project('cairo', 'c', 'cpp',
-+project('cairo', 'c',
-   meson_version: '>= 0.59.0',
-   version: run_command(find_program('version.py'), check: true).stdout().strip(),
-   default_options: ['warning_level=2'],
-@@ -489,6 +489,8 @@ if host_machine.system() == 'darwin' and not get_option('quartz').disabled()
- endif
- 
- if host_machine.system() == 'windows'
-+  add_languages('cpp')
-+
-   add_project_arguments('-DWIN32_LEAN_AND_MEAN', '-DNOMINMAX', language: ['c', 'cpp'])
- 
-   win32_extra_deps = [
--- 
-2.45.2
-
diff --git a/package/cairo/Config.in b/package/cairo/Config.in
index c41a12fe81..0c87a2904b 100644
--- a/package/cairo/Config.in
+++ b/package/cairo/Config.in
@@ -4,7 +4,6 @@ config BR2_PACKAGE_CAIRO
 	select BR2_PACKAGE_FONTCONFIG
 	select BR2_PACKAGE_XLIB_LIBX11 if BR2_PACKAGE_XORG7
 	select BR2_PACKAGE_XLIB_LIBXEXT if BR2_PACKAGE_XORG7
-	select BR2_PACKAGE_XLIB_LIBXRENDER if BR2_PACKAGE_XORG7
 	help
 	  Cairo is a 2D graphics library with support for multiple
 	  output devices. Currently supported output targets include
@@ -16,15 +15,34 @@ config BR2_PACKAGE_CAIRO
 
 if BR2_PACKAGE_CAIRO
 
+config BR2_PACKAGE_CAIRO_PS
+	bool "postscript support"
+	select BR2_PACKAGE_ZLIB
+	select BR2_PACKAGE_CAIRO_PDF
+
+config BR2_PACKAGE_CAIRO_PDF
+	bool "pdf support"
+	select BR2_PACKAGE_ZLIB
+
 config BR2_PACKAGE_CAIRO_PNG
-	bool "png support (png and svg surfaces)"
+	bool "png support"
 	select BR2_PACKAGE_LIBPNG
+	select BR2_PACKAGE_ZLIB
+
+config BR2_PACKAGE_CAIRO_SCRIPT
+	bool "script support"
+	select BR2_PACKAGE_CAIRO_PNG
+
+config BR2_PACKAGE_CAIRO_SVG
+	bool "svg support"
+	select BR2_PACKAGE_CAIRO_PNG
+	select BR2_PACKAGE_CAIRO_PDF
 
 config BR2_PACKAGE_CAIRO_TEE
 	bool "tee support"
 
-config BR2_PACKAGE_CAIRO_ZLIB
-	bool "zlib support (script, ps, pdf, and xml surfaces)"
-	select BR2_PACKAGE_ZLIB
+config BR2_PACKAGE_CAIRO_XML
+	bool "xml support"
+	select BR2_PACKAGE_CAIRO_PNG
 
 endif
diff --git a/package/cairo/cairo.hash b/package/cairo/cairo.hash
index df9c693bad..1dbd64d325 100644
--- a/package/cairo/cairo.hash
+++ b/package/cairo/cairo.hash
@@ -1,5 +1,6 @@
 # From https://www.cairographics.org/releases/cairo-1.18.0.tar.xz.sha256sum
 sha256  243a0736b978a33dee29f9cca7521733b78a65b5418206fef7bd1c3d4cf10b64  cairo-1.18.0.tar.xz
+sha256  5e7b29b3f113ef870d1e3ecf8adf21f923396401604bda16d44be45e66052331  cairo-1.16.0.tar.xz
 
 # Hash for license files:
 sha256  67228a9f7c5f9b67c58f556f1be178f62da4d9e2e6285318d8c74d567255abdf  COPYING
diff --git a/package/cairo/cairo.mk b/package/cairo/cairo.mk
index ba25620f8d..f479aa252a 100644
--- a/package/cairo/cairo.mk
+++ b/package/cairo/cairo.mk
@@ -4,7 +4,7 @@
 #
 ################################################################################
 
-CAIRO_VERSION = 1.18.0
+CAIRO_VERSION = 1.16.0
 CAIRO_SOURCE = cairo-$(CAIRO_VERSION).tar.xz
 CAIRO_LICENSE = LGPL-2.1 or MPL-1.1 (library)
 CAIRO_LICENSE_FILES = COPYING COPYING-LGPL-2.1 COPYING-MPL-1.1
@@ -12,108 +12,171 @@ CAIRO_CPE_ID_VENDOR = cairographics
 CAIRO_SITE = http://cairographics.org/releases
 CAIRO_INSTALL_STAGING = YES
 
-CAIRO_CFLAGS = $(TARGET_CFLAGS)
-CAIRO_LDFLAGS = $(TARGET_LDFLAGS)
+# 0002-ft-Use-FT_Done_MM_Var-instead-of-free-when-available-in-cairo_ft_apply_variation.patch
+CAIRO_IGNORE_CVES += CVE-2018-19876
+
+CAIRO_CONF_ENV = LIBS="$(CAIRO_LIBS)"
 
 # relocation truncated to fit: R_68K_GOT16O
 ifeq ($(BR2_m68k_cf),y)
-CAIRO_CFLAGS += -mxgot
+CAIRO_CONF_ENV += CFLAGS="$(TARGET_CFLAGS) -mxgot"
 endif
 
 ifeq ($(BR2_TOOLCHAIN_HAS_THREADS),)
-CAIRO_CFLAGS += -DCAIRO_NO_MUTEX=1
+CAIRO_CONF_ENV += CPPFLAGS="$(TARGET_CPPFLAGS) -DCAIRO_NO_MUTEX=1"
 endif
 
 # cairo can use C++11 atomics when available, so we need to link with
 # libatomic for the architectures who need libatomic.
 ifeq ($(BR2_TOOLCHAIN_HAS_LIBATOMIC),y)
-CAIRO_LDFLAGS += -latomic
+CAIRO_LIBS += -latomic
 endif
 
 CAIRO_CONF_OPTS = \
-	-Ddwrite=disabled \
-	-Dfontconfig=enabled \
-	-Dquartz=disabled \
-	-Dtests=disabled \
-	-Dspectre=disabled \
-	-Dsymbol-lookup=disabled \
-	-Dgtk_doc=false \
-	-Dc_std=gnu11
-CAIRO_DEPENDENCIES = \
-	host-pkgconf \
-	fontconfig \
-	pixman
+	--enable-trace=no \
+	--enable-interpreter=no
+
+CAIRO_DEPENDENCIES = host-pkgconf fontconfig pixman
 
 # Just the bare minimum to make other host-* packages happy
 HOST_CAIRO_CONF_OPTS = \
-	-Ddwrite=disabled \
-	-Dfontconfig=enabled \
-	-Dfreetype=enabled \
-	-Dpng=enabled \
-	-Dquartz=disabled \
-	-Dtee=disabled \
-	-Dxcb=disabled \
-	-Dxlib=disabled \
-	-Dzlib=enabled \
-	-Dtests=disabled \
-	-Dglib=enabled \
-	-Dspectre=disabled \
-	-Dsymbol-lookup=disabled \
-	-Dgtk_doc=false \
-	-Dc_std=gnu11
+	--enable-trace=no \
+	--enable-interpreter=no \
+	--disable-directfb \
+	--enable-ft \
+	--enable-gobject \
+	--disable-glesv2 \
+	--disable-vg \
+	--disable-xlib \
+	--disable-xcb \
+	--without-x \
+	--disable-xlib-xrender \
+	--disable-ps \
+	--disable-pdf \
+	--enable-png \
+	--enable-script \
+	--disable-svg \
+	--disable-tee \
+	--disable-xml
 HOST_CAIRO_DEPENDENCIES = \
 	host-freetype \
 	host-fontconfig \
 	host-libglib2 \
 	host-libpng \
 	host-pixman \
-	host-pkgconf \
-	host-zlib
+	host-pkgconf
 
-ifeq ($(BR2_PACKAGE_LZO),y)
-CAIRO_DEPENDENCIES += lzo
+# DirectFB svg support rely on Cairo and Cairo DirectFB support depends on
+# DirectFB. Break circular dependency by disabling DirectFB support in Cairo
+# (which is experimental)
+ifeq ($(BR2_PACKAGE_DIRECTFB)x$(BR2_PACKAGE_DIRECTFB_SVG),yx)
+CAIRO_CONF_OPTS += --enable-directfb
+CAIRO_DEPENDENCIES += directfb
+else
+CAIRO_CONF_OPTS += --disable-directfb
 endif
 
 ifeq ($(BR2_PACKAGE_FREETYPE),y)
-CAIRO_CONF_OPTS += -Dfreetype=enabled
+CAIRO_CONF_OPTS += --enable-ft
 CAIRO_DEPENDENCIES += freetype
 else
-CAIRO_CONF_OPTS += -Dfreetype=disabled
+CAIRO_CONF_OPTS += --disable-ft
+endif
+
+ifeq ($(BR2_PACKAGE_LIBEXECINFO),y)
+CAIRO_DEPENDENCIES += libexecinfo
+CAIRO_LIBS += -lexecinfo
 endif
 
 ifeq ($(BR2_PACKAGE_LIBGLIB2),y)
-CAIRO_CONF_OPTS += -Dglib=enabled
+CAIRO_CONF_OPTS += --enable-gobject
 CAIRO_DEPENDENCIES += libglib2
 else
-CAIRO_CONF_OPTS += -Dglib=disabled
+CAIRO_CONF_OPTS += --disable-gobject
+endif
+
+# Can use GL or GLESv2 but not both
+ifeq ($(BR2_PACKAGE_HAS_LIBGL),y)
+CAIRO_CONF_OPTS += --enable-gl --disable-glesv2
+CAIRO_DEPENDENCIES += libgl
+else
+ifeq ($(BR2_PACKAGE_HAS_LIBGLES),y)
+CAIRO_CONF_OPTS += --disable-gl --enable-glesv2
+CAIRO_DEPENDENCIES += libgles
+else
+CAIRO_CONF_OPTS += --disable-gl --disable-glesv2
+endif
+endif
+
+ifeq ($(BR2_PACKAGE_HAS_LIBOPENVG),y)
+CAIRO_CONF_OPTS += --enable-vg
+CAIRO_DEPENDENCIES += libopenvg
+else
+CAIRO_CONF_OPTS += --disable-vg
+endif
+
+ifeq ($(BR2_PACKAGE_LZO),y)
+CAIRO_DEPENDENCIES += lzo
 endif
 
 ifeq ($(BR2_PACKAGE_XORG7),y)
-CAIRO_CONF_OPTS += -Dxcb=enabled -Dxlib=enabled -Dxlib-xcb=enabled
-CAIRO_DEPENDENCIES += xlib_libX11 xlib_libXext xlib_libXrender
+CAIRO_CONF_OPTS += --enable-xlib --enable-xcb --with-x
+CAIRO_DEPENDENCIES += xlib_libX11 xlib_libXext
 else
-CAIRO_CONF_OPTS += -Dxcb=disabled -Dxlib=disabled -Dxlib-xcb=disabled
+CAIRO_CONF_OPTS += --disable-xlib --disable-xcb --without-x
+endif
+
+ifeq ($(BR2_PACKAGE_XLIB_LIBXRENDER),y)
+CAIRO_CONF_OPTS += --enable-xlib-xrender
+CAIRO_DEPENDENCIES += xlib_libXrender
+else
+CAIRO_CONF_OPTS += --disable-xlib-xrender
+endif
+
+ifeq ($(BR2_PACKAGE_CAIRO_PS),y)
+CAIRO_CONF_OPTS += --enable-ps
+CAIRO_DEPENDENCIES += zlib
+else
+CAIRO_CONF_OPTS += --disable-ps
+endif
+
+ifeq ($(BR2_PACKAGE_CAIRO_PDF),y)
+CAIRO_CONF_OPTS += --enable-pdf
+CAIRO_DEPENDENCIES += zlib
+else
+CAIRO_CONF_OPTS += --disable-pdf
 endif
 
 ifeq ($(BR2_PACKAGE_CAIRO_PNG),y)
-CAIRO_CONF_OPTS += -Dpng=enabled
+CAIRO_CONF_OPTS += --enable-png
 CAIRO_DEPENDENCIES += libpng
 else
-CAIRO_CONF_OPTS += -Dpng=disabled
+CAIRO_CONF_OPTS += --disable-png
+endif
+
+ifeq ($(BR2_PACKAGE_CAIRO_SCRIPT),y)
+CAIRO_CONF_OPTS += --enable-script
+else
+CAIRO_CONF_OPTS += --disable-script
+endif
+
+ifeq ($(BR2_PACKAGE_CAIRO_SVG),y)
+CAIRO_CONF_OPTS += --enable-svg
+else
+CAIRO_CONF_OPTS += --disable-svg
 endif
 
 ifeq ($(BR2_PACKAGE_CAIRO_TEE),y)
-CAIRO_CONF_OPTS += -Dtee=enabled
+CAIRO_CONF_OPTS += --enable-tee
 else
-CAIRO_CONF_OPTS += -Dtee=disabled
+CAIRO_CONF_OPTS += --disable-tee
 endif
 
-ifeq ($(BR2_PACKAGE_CAIRO_ZLIB),y)
-CAIRO_CONF_OPTS += -Dzlib=enabled
-CAIRO_DEPENDENCIES += zlib
+ifeq ($(BR2_PACKAGE_CAIRO_XML),y)
+CAIRO_CONF_OPTS += --enable-xml
 else
-CAIRO_CONF_OPTS += -Dzlib=disabled
+CAIRO_CONF_OPTS += --disable-xml
 endif
 
-$(eval $(meson-package))
-$(eval $(host-meson-package))
+$(eval $(autotools-package))
+$(eval $(host-autotools-package))
